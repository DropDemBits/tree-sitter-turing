================================================================================
primitive ty - simple
================================================================================

type a : boolean
type a : addressint
type a : int
type a : int1
type a : int2
type a : int4
type a : nat
type a : nat1
type a : nat2
type a : nat4
type a : real
type a : real4
type a : real8
type a : char
type a : string

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_identifier)
    (primitive_type))
  (type_declaration
    (type_identifier)
    (primitive_type))
  (type_declaration
    (type_identifier)
    (primitive_type))
  (type_declaration
    (type_identifier)
    (primitive_type))
  (type_declaration
    (type_identifier)
    (primitive_type))
  (type_declaration
    (type_identifier)
    (primitive_type))
  (type_declaration
    (type_identifier)
    (primitive_type))
  (type_declaration
    (type_identifier)
    (primitive_type))
  (type_declaration
    (type_identifier)
    (primitive_type))
  (type_declaration
    (type_identifier)
    (primitive_type))
  (type_declaration
    (type_identifier)
    (primitive_type))
  (type_declaration
    (type_identifier)
    (primitive_type))
  (type_declaration
    (type_identifier)
    (primitive_type))
  (type_declaration
    (type_identifier)
    (primitive_type))
  (type_declaration
    (type_identifier)
    (primitive_type)))

================================================================================
primitive ty - const sized
================================================================================

type a : char(a)
type a : string(a)

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_identifier)
    (primitive_type
      (charseq_size
        (nameref_expression
          (path_component
            (identifier))))))
  (type_declaration
    (type_identifier)
    (primitive_type
      (charseq_size
        (nameref_expression
          (path_component
            (identifier)))))))

================================================================================
primitive ty - dyn sized
================================================================================

type a : char(*)
type a : string(*)

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (type_identifier)
    (primitive_type
      (charseq_size)))
  (type_declaration
    (type_identifier)
    (primitive_type
      (charseq_size))))

================================================================================
range type - start and end
================================================================================

type a : 1 .. 2

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (range_type
      start: (literal_expression
        (integer_literal))
      end: (literal_expression
        (integer_literal)))))

================================================================================
range type - only start
================================================================================

type a : 1 ..

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (range_type
      start: (literal_expression
        (integer_literal))
      end: (nameref_expression
        (path_component
          (MISSING identifier))))))

================================================================================
range type - only end
================================================================================

type a : .. 2

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (range_type
      start: (nameref_expression
        (path_component
          (MISSING identifier)))
      end: (literal_expression
        (integer_literal)))))

================================================================================
range type - no bounds
================================================================================

type a : ..

--------------------------------------------------------------------------------

(source_file
  (ERROR
    (type_identifier)))

================================================================================
expression in type position
================================================================================

type a : 1 + 1

--------------------------------------------------------------------------------

(source_file
  (ERROR
    (type_identifier)
    (binary_expression
      (literal_expression
        (integer_literal))
      (literal_expression
        (integer_literal)))))

================================================================================
enum ty - no variants
================================================================================

type e : enum()

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (enum_type)))

================================================================================
enum ty - no variants with size
================================================================================

type e : enum() : 4

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (enum_type
      size_spec: (literal_expression
        (integer_literal)))))

================================================================================
enum ty - one variant
================================================================================

type e : enum(a)

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (enum_type
      variant: (identifier))))

================================================================================
enum ty - packed one variant
================================================================================

type e : packed enum(a)

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (enum_type
      (packed_attr)
      variant: (identifier))))

================================================================================
enum ty - one variant with size
================================================================================

type e : enum(a) : 4

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (enum_type
      variant: (identifier)
      size_spec: (literal_expression
        (integer_literal)))))

================================================================================
enum ty - many variants
================================================================================

type e : enum(a, b, c, d, e, f)

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (enum_type
      variant: (identifier)
      variant: (identifier)
      variant: (identifier)
      variant: (identifier)
      variant: (identifier)
      variant: (identifier))))

================================================================================
enum ty - packed many variants
================================================================================

type e : packed enum(a, b, c, d, e, f)

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (enum_type
      (packed_attr)
      variant: (identifier)
      variant: (identifier)
      variant: (identifier)
      variant: (identifier)
      variant: (identifier)
      variant: (identifier))))

================================================================================
enum ty - many variants with size
================================================================================

type e : enum(a, b, c, d, e, f) : 4

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (enum_type
      variant: (identifier)
      variant: (identifier)
      variant: (identifier)
      variant: (identifier)
      variant: (identifier)
      variant: (identifier)
      size_spec: (literal_expression
        (integer_literal)))))

================================================================================
array ty - normal
================================================================================

type a : array 1 .. 3, int, char, boolean of int

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (array_type
      index_range: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal)))
      index_range: (primitive_type)
      index_range: (primitive_type)
      index_range: (primitive_type)
      element_type: (primitive_type))))

================================================================================
array ty - packed
================================================================================

type a : packed array 1 .. 3, int, char, boolean of int

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (array_type
      (packed_attr)
      index_range: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal)))
      index_range: (primitive_type)
      index_range: (primitive_type)
      index_range: (primitive_type)
      element_type: (primitive_type))))

================================================================================
array ty - trailing comma
================================================================================

type a : array 1 .. 3, of int

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (array_type
      index_range: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal)))
      element_type: (primitive_type))))

================================================================================
set ty - normal
================================================================================

type e : set of int1

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (set_type
      element_type: (primitive_type))))

================================================================================
set ty - packed
================================================================================

type e : packed set of int1

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (set_type
      (packed_attr)
      element_type: (primitive_type))))

================================================================================
set ty - with size
================================================================================

type e : set of int1 : 2

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (set_type
      element_type: (primitive_type)
      size_spec: (literal_expression
        (integer_literal)))))

================================================================================
record ty - normal
================================================================================

type r : record
  f1 : int
  f2 : 1 .. 2
end record

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (record_type
      (record_field
        name: (field_identifier)
        field_type: (primitive_type))
      (record_field
        name: (field_identifier)
        field_type: (range_type
          start: (literal_expression
            (integer_literal))
          end: (literal_expression
            (integer_literal)))))))

================================================================================
record ty - packed
================================================================================

type r : packed record
  f2 : 1 .. 2
end record

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (record_type
      (packed_attr)
      (record_field
        name: (field_identifier)
        field_type: (range_type
          start: (literal_expression
            (integer_literal))
          end: (literal_expression
            (integer_literal)))))))

================================================================================
record ty - no fields
================================================================================

% invalid semantically, valid syntactically
type r : record
end record

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (type_declaration
    name: (type_identifier)
    type_spec: (record_type)))

================================================================================
record ty - optional semicolon
================================================================================

type r : record
  f1, f2 : int;
  f3, f4 : int;
end record

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (record_type
      (record_field
        name: (field_identifier)
        name: (field_identifier)
        field_type: (primitive_type))
      (record_field
        name: (field_identifier)
        name: (field_identifier)
        field_type: (primitive_type)))))

================================================================================
record ty - several semicolons
================================================================================

type r : record
  f1, f2 : int;;;;;;;;;;;
  f3, f4 : int;
end record

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (record_type
      (record_field
        name: (field_identifier)
        name: (field_identifier)
        field_type: (primitive_type))
      (record_field
        name: (field_identifier)
        name: (field_identifier)
        field_type: (primitive_type)))))

================================================================================
record ty - missing final end record
================================================================================

type r : record
  f1 : int
end

begin end

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (record_type
      (record_field
        name: (field_identifier)
        field_type: (primitive_type))
      (MISSING "record")))
  (block_statement))

================================================================================
record ty field - multiple names
================================================================================

type r : record
  f1, f2, f3 : int
end record

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (record_type
      (record_field
        name: (field_identifier)
        name: (field_identifier)
        name: (field_identifier)
        field_type: (primitive_type)))))

================================================================================
record ty field - invalid trailing comma
================================================================================

% as a rule, lists not contained within a set of parentheses cannot have
% trailing commas
type r : record
  f1, f2, : int
end record

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (line_comment)
  (type_declaration
    name: (type_identifier)
    type_spec: (record_type
      (record_field
        name: (field_identifier)
        name: (field_identifier)
        (ERROR)
        field_type: (primitive_type)))))

================================================================================
union ty - normal
================================================================================

type u : union : 1 .. 2 of
label 1:
  f1 : int
  f2 : 1 .. 2
label:
  f1 : char
end union

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (union_type
      tag_range: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal)))
      (union_variant
        selector: (literal_expression
          (integer_literal))
        (record_field
          name: (field_identifier)
          field_type: (primitive_type))
        (record_field
          name: (field_identifier)
          field_type: (range_type
            start: (literal_expression
              (integer_literal))
            end: (literal_expression
              (integer_literal)))))
      (union_variant
        (record_field
          name: (field_identifier)
          field_type: (primitive_type))))))

================================================================================
union ty - named tag
================================================================================

type u : union some_tag : 1 .. 2 of
label 1:
  f1 : int
  f2 : 1 .. 2
label:
  f1 : char
end union

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (union_type
      tag_name: (field_identifier)
      tag_range: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal)))
      (union_variant
        selector: (literal_expression
          (integer_literal))
        (record_field
          name: (field_identifier)
          field_type: (primitive_type))
        (record_field
          name: (field_identifier)
          field_type: (range_type
            start: (literal_expression
              (integer_literal))
            end: (literal_expression
              (integer_literal)))))
      (union_variant
        (record_field
          name: (field_identifier)
          field_type: (primitive_type))))))

================================================================================
union ty - packed
================================================================================

type u : packed union : 2 .. 4 of
label:
  f2 : 1 .. 2
end union

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (union_type
      (packed_attr)
      tag_range: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal)))
      (union_variant
        (record_field
          name: (field_identifier)
          field_type: (range_type
            start: (literal_expression
              (integer_literal))
            end: (literal_expression
              (integer_literal))))))))

================================================================================
union ty - packed with tag name
================================================================================

type u : packed union some_tag : 2 .. 4 of
label:
  f2 : 1 .. 2
end union

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (union_type
      (packed_attr)
      tag_name: (field_identifier)
      tag_range: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal)))
      (union_variant
        (record_field
          name: (field_identifier)
          field_type: (range_type
            start: (literal_expression
              (integer_literal))
            end: (literal_expression
              (integer_literal))))))))

================================================================================
union ty - no variants
================================================================================

% invalid semantically, valid syntactically
type u : union : 1 .. 2 of
end union

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (type_declaration
    name: (type_identifier)
    type_spec: (union_type
      tag_range: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal))))))

================================================================================
union ty - missing final end union
================================================================================

type u : union : 1 .. 2 of
label:
end

begin end

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (union_type
      tag_range: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal)))
      (union_variant)
      (MISSING "union")))
  (block_statement))

================================================================================
union ty variant - no fields
================================================================================

type u : union : 1 .. 2 of
label 1, 2, 3:
end union

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (union_type
      tag_range: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal)))
      (union_variant
        selector: (literal_expression
          (integer_literal))
        selector: (literal_expression
          (integer_literal))
        selector: (literal_expression
          (integer_literal))))))

================================================================================
union ty variant - no selectors
================================================================================

type u : union : 1 .. 2 of
label:
end union

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (union_type
      tag_range: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal)))
      (union_variant))))

================================================================================
union ty variant - invalid trailing comma
================================================================================

type u : union : 1 .. 2 of
label 1, 2, 3, :
end union

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (union_type
      tag_range: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal)))
      (union_variant
        selector: (literal_expression
          (integer_literal))
        selector: (literal_expression
          (integer_literal))
        selector: (literal_expression
          (integer_literal))
        selector: (nameref_expression
          (path_component
            (MISSING identifier)))))))

================================================================================
union ty variant - optional semicolon
================================================================================

type u : union : 1 .. 2 of
label:
  f1, f2 : int;
  f3, f4 : int;
end union

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (union_type
      tag_range: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal)))
      (union_variant
        (record_field
          name: (field_identifier)
          name: (field_identifier)
          field_type: (primitive_type))
        (record_field
          name: (field_identifier)
          name: (field_identifier)
          field_type: (primitive_type))))))

================================================================================
union ty variant - several semicolons
================================================================================

type u : union : 1 .. 2 of
label 1:
  f1, f2 : int;;;;;;;;;;;
  f3, f4 : int;
label:
  f1, f2 : int;;;;;;;;;;;
  f3, f4 : int;
end union

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (union_type
      tag_range: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal)))
      (union_variant
        selector: (literal_expression
          (integer_literal))
        (record_field
          name: (field_identifier)
          name: (field_identifier)
          field_type: (primitive_type))
        (record_field
          name: (field_identifier)
          name: (field_identifier)
          field_type: (primitive_type)))
      (union_variant
        (record_field
          name: (field_identifier)
          name: (field_identifier)
          field_type: (primitive_type))
        (record_field
          name: (field_identifier)
          name: (field_identifier)
          field_type: (primitive_type))))))

================================================================================
union ty variant field - multiple names
================================================================================

type u : union : 1 .. 2 of
label:
  f1, f2, f3 : int
end union

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (union_type
      tag_range: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal)))
      (union_variant
        (record_field
          name: (field_identifier)
          name: (field_identifier)
          name: (field_identifier)
          field_type: (primitive_type))))))

================================================================================
union ty variant field - invalid trailing comma
================================================================================

% as a rule, lists not contained within a set of parentheses cannot have
% trailing commas
type r : union : 1 .. 2 of
label:
  f1, f2, : int
end union

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (line_comment)
  (type_declaration
    name: (type_identifier)
    type_spec: (union_type
      tag_range: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal)))
      (union_variant
        (record_field
          name: (field_identifier)
          name: (field_identifier)
          (ERROR)
          field_type: (primitive_type))))))

================================================================================
pointer ty - normal
================================================================================

type p : pointer to int
type p : ^int

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (pointer_type
      element_type: (primitive_type)))
  (type_declaration
    name: (type_identifier)
    type_spec: (pointer_type
      element_type: (primitive_type))))

================================================================================
pointer ty - checked
================================================================================

type p : checked pointer to int
type p : checked ^int

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (pointer_type
      checkedness: (checked_attr)
      element_type: (primitive_type)))
  (type_declaration
    name: (type_identifier)
    type_spec: (pointer_type
      checkedness: (checked_attr)
      element_type: (primitive_type))))

================================================================================
pointer ty - unchecked
================================================================================

type p : unchecked pointer to int
type p : unchecked ^int

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (pointer_type
      checkedness: (unchecked_attr)
      element_type: (primitive_type)))
  (type_declaration
    name: (type_identifier)
    type_spec: (pointer_type
      checkedness: (unchecked_attr)
      element_type: (primitive_type))))

================================================================================
pointer ty - nested
================================================================================

type p : unchecked pointer to checked^^ pointer to int

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (pointer_type
      checkedness: (unchecked_attr)
      element_type: (pointer_type
        checkedness: (checked_attr)
        element_type: (pointer_type
          element_type: (pointer_type
            element_type: (primitive_type)))))))

================================================================================
function ty - normal
================================================================================

type a : function() : int
type a : fcn() : int

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (function_type
      params: (param_spec)
      result_type: (primitive_type)))
  (type_declaration
    name: (type_identifier)
    type_spec: (function_type
      params: (param_spec)
      result_type: (primitive_type))))

================================================================================
function ty - with unused name
================================================================================

type a : function name() : int

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (function_type
      name: (identifier)
      params: (param_spec)
      result_type: (primitive_type))))

================================================================================
function ty - with no params
================================================================================

type a : function : int

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (function_type
      result_type: (primitive_type))))

================================================================================
function ty - with constvar param
================================================================================

type a : function name(a : int) : int

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (function_type
      name: (identifier)
      params: (param_spec
        (constvar_param
          name: (identifier)
          param_type: (primitive_type)))
      result_type: (primitive_type))))

================================================================================
function ty - with function param
================================================================================

type a : function name(fcn() : int) : int

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (function_type
      name: (identifier)
      params: (param_spec
        (function_type
          params: (param_spec)
          result_type: (primitive_type)))
      result_type: (primitive_type))))

================================================================================
function ty - with named function param
================================================================================

type a : function name(fcn a() : int) : int

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (function_type
      name: (identifier)
      params: (param_spec
        (function_type
          name: (identifier)
          params: (param_spec)
          result_type: (primitive_type)))
      result_type: (primitive_type))))

================================================================================
function ty - with named procedure param
================================================================================

type a : function name(proc a()) : int

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (function_type
      name: (identifier)
      params: (param_spec
        (procedure_type
          name: (identifier)
          params: (param_spec)))
      result_type: (primitive_type))))

================================================================================
procedure ty - normal
================================================================================

type a : procedure()
type a : proc()

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (procedure_type
      params: (param_spec)))
  (type_declaration
    name: (type_identifier)
    type_spec: (procedure_type
      params: (param_spec))))

================================================================================
procedure ty - with unused name
================================================================================

type a : procedure name()

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (procedure_type
      name: (identifier)
      params: (param_spec))))

================================================================================
procedure ty - with no params
================================================================================

type a : procedure

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (procedure_type)))

================================================================================
procedure ty - with constvar param
================================================================================

type a : procedure name(a : int)

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (procedure_type
      name: (identifier)
      params: (param_spec
        (constvar_param
          name: (identifier)
          param_type: (primitive_type))))))

================================================================================
procedure ty - with function param
================================================================================

type a : procedure name(fcn() : int)

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (procedure_type
      name: (identifier)
      params: (param_spec
        (function_type
          params: (param_spec)
          result_type: (primitive_type))))))

================================================================================
procedure ty - with named function param
================================================================================

type a : procedure name(fcn a() : int)

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (procedure_type
      name: (identifier)
      params: (param_spec
        (function_type
          name: (identifier)
          params: (param_spec)
          result_type: (primitive_type))))))

================================================================================
procedure ty - with named procedure param
================================================================================

type a : procedure name(proc a())

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (procedure_type
      name: (identifier)
      params: (param_spec
        (procedure_type
          name: (identifier)
          params: (param_spec))))))

===============================================================================
collection type - concrete type
===============================================================================

type a : collection of int

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (collection_type
      element_type: (primitive_type))))

===============================================================================
collection type - forward declared type
===============================================================================

type a : collection of forward thing

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (collection_type
      name: (type_identifier))))

===============================================================================
condition type
===============================================================================

type a : condition
type a : priority condition
type a : deferred condition
type a : timeout condition

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (type_identifier)
    type_spec: (condition_type))
  (type_declaration
    name: (type_identifier)
    type_spec: (condition_type))
  (type_declaration
    name: (type_identifier)
    type_spec: (condition_type))
  (type_declaration
    name: (type_identifier)
    type_spec: (condition_type)))
