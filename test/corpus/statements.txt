================================================================================
statements - surrounded by semis
================================================================================

;;;;;;;;;;;;;
const a := 2;
type q : int;
;;;;;;;;;;;;;

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (integer_literal)))
  (type_declaration
    (identifier)
    (primitive_type)))

================================================================================
statements - with semis
================================================================================

const a := 2;
type q : int;

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (integer_literal)))
  (type_declaration
    (identifier)
    (primitive_type)))

================================================================================
constvar declaration - full
================================================================================

const a : boolean := b
var a : boolean := b

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    name: (identifier)
    type_spec: (primitive_type)
    initializer: (nameref_expression
      (path_component
        (identifier))))
  (constvar_declaration
    name: (identifier)
    type_spec: (primitive_type)
    initializer: (nameref_expression
      (path_component
        (identifier)))))

================================================================================
constvar declaration - type only
================================================================================

const a : boolean
var a : boolean

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (primitive_type))
  (constvar_declaration
    (identifier)
    (primitive_type)))

================================================================================
constvar declaration - init only
================================================================================

const a := b
var a := b

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (nameref_expression
      (path_component
        (identifier))))
  (constvar_declaration
    (identifier)
    (nameref_expression
      (path_component
        (identifier)))))

================================================================================
constvar declaration - missing both
================================================================================

const a
var a

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier))
  (constvar_declaration
    (identifier)))

================================================================================
constvar declaration - pervasive attr
================================================================================

const pervasive a
var pervasive a

const * a
var * a

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (pervasive_attr)
    (identifier))
  (constvar_declaration
    (pervasive_attr)
    (identifier))
  (constvar_declaration
    (pervasive_attr)
    (identifier))
  (constvar_declaration
    (pervasive_attr)
    (identifier)))

================================================================================
constvar declaration - register attr
================================================================================

const register a
var register a

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (register_attr)
    (identifier))
  (constvar_declaration
    (register_attr)
    (identifier)))

================================================================================
constvar declaration - attr ordering
================================================================================

const pervasive register a
var register pervasive a

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (pervasive_attr)
    (register_attr)
    (identifier))
  (constvar_declaration
    (register_attr)
    (identifier))
  (call_statement
    (nameref_expression
      (path_component
        (identifier)))))

================================================================================
constvar declaration - multiple names
================================================================================

const a, b, c, d : int

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    name: (identifier)
    name: (identifier)
    name: (identifier)
    name: (identifier)
    type_spec: (primitive_type)))

================================================================================
constvar declaration - alt eq
================================================================================

const a = 1
var b = 2

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier))
  (ERROR)
  (constvar_declaration
    (identifier))
  (ERROR))

================================================================================
type declaration - full
================================================================================

type a : boolean
type a : forward

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (identifier)
    type_spec: (primitive_type))
  (type_declaration
    name: (identifier)
    type_spec: (forward_type)))

================================================================================
type declaration - pervasive
================================================================================

type pervasive a : boolean
type * a : boolean

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (pervasive_attr)
    (identifier)
    (primitive_type))
  (type_declaration
    (pervasive_attr)
    (identifier)
    (primitive_type)))

================================================================================
type declaration - missing colon
================================================================================

type a boolean

--------------------------------------------------------------------------------

(source_file
  (ERROR
    (identifier)
    (identifier)))

================================================================================
bind declaration - single
================================================================================

bind a to 1

--------------------------------------------------------------------------------

(source_file
  (bind_declaration
    (bind_item
      (identifier)
      (literal_expression
        (integer_literal)))))

================================================================================
bind declaration - many items
================================================================================

bind a to 1, b to 2, c to 3

--------------------------------------------------------------------------------

(source_file
  (bind_declaration
    (bind_item
      (identifier)
      (literal_expression
        (integer_literal)))
    (bind_item
      (identifier)
      (literal_expression
        (integer_literal)))
    (bind_item
      (identifier)
      (literal_expression
        (integer_literal)))))

================================================================================
bind declaration - trailing comma
================================================================================

bind a to 1,
bind a to 1, b to 2, c to 3,

--------------------------------------------------------------------------------

(source_file
  (bind_declaration
    (bind_item
      (identifier)
      (literal_expression
        (integer_literal)))
    (bind_item
      (identifier)
      (ERROR
        (identifier))
      (literal_expression
        (integer_literal)))
    (bind_item
      (identifier)
      (literal_expression
        (integer_literal)))
    (bind_item
      (identifier)
      (literal_expression
        (integer_literal))))
  (ERROR))

================================================================================
bind declaration - with attrs
================================================================================

bind
  var a to 1,
  register b to 2,
  var register c to 3

--------------------------------------------------------------------------------

(source_file
  (bind_declaration
    (bind_item
      (var_attr)
      (identifier)
      (literal_expression
        (integer_literal)))
    (bind_item
      (register_attr)
      (identifier)
      (literal_expression
        (integer_literal)))
    (bind_item
      (var_attr)
      (register_attr)
      (identifier)
      (literal_expression
        (integer_literal)))))

================================================================================
bind declaration - backwards attrs
================================================================================

bind register var c to 3

--------------------------------------------------------------------------------

(source_file
  (bind_declaration
    (bind_item
      (register_attr)
      name: (identifier)
      (ERROR
        (identifier))
      (literal_expression
        (integer_literal)))))

================================================================================
bind declaration - followed by constvar
================================================================================

bind a to b
var wa : int

--------------------------------------------------------------------------------

(source_file
  (bind_declaration
    (bind_item
      (identifier)
      (nameref_expression
        (path_component
          (identifier)))))
  (constvar_declaration
    (identifier)
    (primitive_type)))

================================================================================
bind declaration - error recovery, followed by constvar
================================================================================

bind a to b,
var wa : int

var wow : int % resync

--------------------------------------------------------------------------------

(source_file
  (bind_declaration
    (bind_item
      (identifier)
      (nameref_expression
        (path_component
          (identifier)))))
  (ERROR
    (ERROR
      (var_attr)
      (identifier))
    (var_attr)
    (identifier))
  (line_comment))

================================================================================
function declaration - normal
================================================================================

function someFn() : int end someFn
fcn someFn() : int end someFn

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    name: (identifier)
    params: (param_spec)
    result_type: (primitive_type)
    end_name: (identifier))
  (function_declaration
    name: (identifier)
    params: (param_spec)
    result_type: (primitive_type)
    end_name: (identifier)))

================================================================================
function declaration - pervasive attr
================================================================================

function pervasive someFn() : int end someFn
fcn * someFn() : int end someFn

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    (pervasive_attr)
    name: (identifier)
    params: (param_spec)
    result_type: (primitive_type)
    end_name: (identifier))
  (function_declaration
    (pervasive_attr)
    name: (identifier)
    params: (param_spec)
    result_type: (primitive_type)
    end_name: (identifier)))

================================================================================
function declaration - with statements
================================================================================

function someFn() : int
  begin end
  result 1
end someFn

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    name: (identifier)
    params: (param_spec)
    result_type: (primitive_type)
    (block_statement)
    (result_statement
      value: (literal_expression
        (integer_literal)))
    end_name: (identifier)))

================================================================================
function declaration - one constvar param with one name
================================================================================

function someFn(i : int) : int end someFn

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        param_type: (primitive_type)))
    result_type: (primitive_type)
    end_name: (identifier)))

================================================================================
function declaration - multiple constvar param with shared type
================================================================================

function someFn(i, j, k, l : int) : int end someFn

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        name: (identifier)
        name: (identifier)
        name: (identifier)
        param_type: (primitive_type)))
    result_type: (primitive_type)
    end_name: (identifier)))

================================================================================
function declaration - multiple constvar param with shared type optional comma
================================================================================

function someFn(i, j, : int) : int end someFn

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        name: (identifier)
        param_type: (primitive_type)))
    result_type: (primitive_type)
    end_name: (identifier)))

================================================================================
function declaration - multiple constvar param
================================================================================

function someFn(i : int, j : int, k : int) : int end someFn

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        name: (identifier)
        param_type: (primitive_type)))
    result_type: (primitive_type)
    end_name: (identifier)))

================================================================================
function declaration - multiple constvar param with optional comma
================================================================================

function someFn(i : int, j : int, k : int,) : int end someFn

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        name: (identifier)
        param_type: (primitive_type)))
    result_type: (primitive_type)
    end_name: (identifier)))

================================================================================
function declaration - subprogram params
================================================================================

function someFn(fcn i() : int, function : int, proc j(), proc) : int end someFn

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    name: (identifier)
    params: (param_spec
      (function_type
        name: (identifier)
        params: (param_spec)
        result_type: (primitive_type))
      (function_type
        result_type: (primitive_type))
      (procedure_type
        name: (identifier)
        params: (param_spec))
      (procedure_type))
    result_type: (primitive_type)
    end_name: (identifier)))

================================================================================
function declaration - mixed params
================================================================================

function someFn(function : int, i : int, proc) : int end someFn

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    name: (identifier)
    params: (param_spec
      (function_type
        result_type: (primitive_type))
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (procedure_type))
    result_type: (primitive_type)
    end_name: (identifier)))

================================================================================
function declaration - all constvar attrs
================================================================================

function someFn(
  i : int,
  register i : int,
  var register i : int,
  i : cheat int,
  register i : cheat int,
  var register i : cheat int,
) : int
end someFn

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        bind_to_register: (register_attr)
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        by_ref: (var_attr)
        bind_to_register: (register_attr)
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        name: (identifier)
        coerce_type: (cheat_attr)
        param_type: (primitive_type))
      (constvar_param
        bind_to_register: (register_attr)
        name: (identifier)
        coerce_type: (cheat_attr)
        param_type: (primitive_type))
      (constvar_param
        by_ref: (var_attr)
        bind_to_register: (register_attr)
        name: (identifier)
        coerce_type: (cheat_attr)
        param_type: (primitive_type)))
    result_type: (primitive_type)
    end_name: (identifier)))

================================================================================
function declaration - with named result
================================================================================

function namedRes() toName : int end namedRes

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    name: (identifier)
    params: (param_spec)
    result_name: (identifier)
    result_type: (primitive_type)
    end_name: (identifier)))

================================================================================
function declaration - no params
================================================================================

function noParams : int end noParams

--------------------------------------------------------------------------------

(source_file
  (function_declaration
    name: (identifier)
    result_type: (primitive_type)
    end_name: (identifier)))

================================================================================
procedure declaration - normal
================================================================================

procedure someProc() end someProc
proc someProc() end someProc

--------------------------------------------------------------------------------

(source_file
  (procedure_declaration
    name: (identifier)
    params: (param_spec)
    end_name: (identifier))
  (procedure_declaration
    name: (identifier)
    params: (param_spec)
    end_name: (identifier)))

================================================================================
procedure declaration - pervasive attr
================================================================================

procedure pervasive someProc() end someProc
proc * someProc() end someProc

--------------------------------------------------------------------------------

(source_file
  (procedure_declaration
    (pervasive_attr)
    name: (identifier)
    params: (param_spec)
    end_name: (identifier))
  (procedure_declaration
    (pervasive_attr)
    name: (identifier)
    params: (param_spec)
    end_name: (identifier)))

================================================================================
procedure declaration - with statements
================================================================================

procedure someProc()
  begin end
  return
end someProc

--------------------------------------------------------------------------------

(source_file
  (procedure_declaration
    name: (identifier)
    params: (param_spec)
    (block_statement)
    (return_statement)
    end_name: (identifier)))

================================================================================
procedure declaration - one constvar param with one name
================================================================================

procedure someProc(i : int) end someProc

--------------------------------------------------------------------------------

(source_file
  (procedure_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        param_type: (primitive_type)))
    end_name: (identifier)))

================================================================================
procedure declaration - multiple constvar param with shared type
================================================================================

procedure someProc(i, j, k, l : int) end someProc

--------------------------------------------------------------------------------

(source_file
  (procedure_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        name: (identifier)
        name: (identifier)
        name: (identifier)
        param_type: (primitive_type)))
    end_name: (identifier)))

================================================================================
procedure declaration - multiple constvar param with shared type optional comma
================================================================================

procedure someProc(i, j, : int) end someProc

--------------------------------------------------------------------------------

(source_file
  (procedure_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        name: (identifier)
        param_type: (primitive_type)))
    end_name: (identifier)))

================================================================================
procedure declaration - multiple constvar param
================================================================================

procedure someProc(i : int, j : int, k : int) end someProc

--------------------------------------------------------------------------------

(source_file
  (procedure_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        name: (identifier)
        param_type: (primitive_type)))
    end_name: (identifier)))

================================================================================
procedure declaration - multiple constvar param with optional comma
================================================================================

procedure someProc(i : int, j : int, k : int,) end someProc

--------------------------------------------------------------------------------

(source_file
  (procedure_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        name: (identifier)
        param_type: (primitive_type)))
    end_name: (identifier)))

================================================================================
procedure declaration - subprogram params
================================================================================

procedure someProc(fcn i() : int, function : int, proc j(), proc) end someProc

--------------------------------------------------------------------------------

(source_file
  (procedure_declaration
    name: (identifier)
    params: (param_spec
      (function_type
        name: (identifier)
        params: (param_spec)
        result_type: (primitive_type))
      (function_type
        result_type: (primitive_type))
      (procedure_type
        name: (identifier)
        params: (param_spec))
      (procedure_type))
    end_name: (identifier)))

================================================================================
procedure declaration - mixed params
================================================================================

procedure someProc(function : int, i : int, proc) end someProc

--------------------------------------------------------------------------------

(source_file
  (procedure_declaration
    name: (identifier)
    params: (param_spec
      (function_type
        result_type: (primitive_type))
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (procedure_type))
    end_name: (identifier)))

================================================================================
procedure declaration - all constvar attrs
================================================================================

procedure someProc(
  i : int,
  register i : int,
  var register i : int,
  i : cheat int,
  register i : cheat int,
  var register i : cheat int,
)
end someProc

--------------------------------------------------------------------------------

(source_file
  (procedure_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        bind_to_register: (register_attr)
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        by_ref: (var_attr)
        bind_to_register: (register_attr)
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        name: (identifier)
        coerce_type: (cheat_attr)
        param_type: (primitive_type))
      (constvar_param
        bind_to_register: (register_attr)
        name: (identifier)
        coerce_type: (cheat_attr)
        param_type: (primitive_type))
      (constvar_param
        by_ref: (var_attr)
        bind_to_register: (register_attr)
        name: (identifier)
        coerce_type: (cheat_attr)
        param_type: (primitive_type)))
    end_name: (identifier)))

================================================================================
procedure declaration - with device spec
================================================================================

procedure withDevSpec() : 1 end withDevSpec

--------------------------------------------------------------------------------

(source_file
  (procedure_declaration
    name: (identifier)
    params: (param_spec)
    device_spec: (literal_expression
      (integer_literal))
    end_name: (identifier)))

================================================================================
procedure declaration - no params
================================================================================

procedure noParams end noParams

--------------------------------------------------------------------------------

(source_file
  (procedure_declaration
    name: (identifier)
    end_name: (identifier)))

================================================================================
process declaration - normal
================================================================================

process someProcess() end someProcess

--------------------------------------------------------------------------------

(source_file
  (process_declaration
    name: (identifier)
    params: (param_spec)
    end_name: (identifier)))

================================================================================
process declaration - pervasive attr
================================================================================

process pervasive someProcess() end someProcess
process * someProcess() end someProcess

--------------------------------------------------------------------------------

(source_file
  (process_declaration
    (pervasive_attr)
    name: (identifier)
    params: (param_spec)
    end_name: (identifier))
  (process_declaration
    (pervasive_attr)
    name: (identifier)
    params: (param_spec)
    end_name: (identifier)))

================================================================================
process declaration - with statements
================================================================================

process someProcess()
  begin end
  return
end someProcess

--------------------------------------------------------------------------------

(source_file
  (process_declaration
    name: (identifier)
    params: (param_spec)
    (block_statement)
    (return_statement)
    end_name: (identifier)))

================================================================================
process declaration - one constvar param with one name
================================================================================

process someProcess(i : int) end someProcess

--------------------------------------------------------------------------------

(source_file
  (process_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        param_type: (primitive_type)))
    end_name: (identifier)))

================================================================================
process declaration - multiple constvar param with shared type
================================================================================

process someProcess(i, j, k, l : int) end someProcess

--------------------------------------------------------------------------------

(source_file
  (process_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        name: (identifier)
        name: (identifier)
        name: (identifier)
        param_type: (primitive_type)))
    end_name: (identifier)))

================================================================================
process declaration - multiple constvar param with shared type optional comma
================================================================================

process someProcess(i, j, : int) end someProcess

--------------------------------------------------------------------------------

(source_file
  (process_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        name: (identifier)
        param_type: (primitive_type)))
    end_name: (identifier)))

================================================================================
process declaration - multiple constvar param
================================================================================

process someProcess(i : int, j : int, k : int) end someProcess

--------------------------------------------------------------------------------

(source_file
  (process_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        name: (identifier)
        param_type: (primitive_type)))
    end_name: (identifier)))

================================================================================
process declaration - multiple constvar param with optional comma
================================================================================

process someProcess(i : int, j : int, k : int,) end someProcess

--------------------------------------------------------------------------------

(source_file
  (process_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        name: (identifier)
        param_type: (primitive_type)))
    end_name: (identifier)))

================================================================================
process declaration - subprogram params
================================================================================

process someProcess(fcn i() : int, function : int, proc j(), proc) end someProcess

--------------------------------------------------------------------------------

(source_file
  (process_declaration
    name: (identifier)
    params: (param_spec
      (function_type
        name: (identifier)
        params: (param_spec)
        result_type: (primitive_type))
      (function_type
        result_type: (primitive_type))
      (procedure_type
        name: (identifier)
        params: (param_spec))
      (procedure_type))
    end_name: (identifier)))

================================================================================
process declaration - mixed params
================================================================================

process someProcess(function : int, i : int, proc) end someProcess

--------------------------------------------------------------------------------

(source_file
  (process_declaration
    name: (identifier)
    params: (param_spec
      (function_type
        result_type: (primitive_type))
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (procedure_type))
    end_name: (identifier)))

================================================================================
process declaration - all constvar attrs
================================================================================

process someProcess(
  i : int,
  register i : int,
  var register i : int,
  i : cheat int,
  register i : cheat int,
  var register i : cheat int,
)
end someProcess

--------------------------------------------------------------------------------

(source_file
  (process_declaration
    name: (identifier)
    params: (param_spec
      (constvar_param
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        bind_to_register: (register_attr)
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        by_ref: (var_attr)
        bind_to_register: (register_attr)
        name: (identifier)
        param_type: (primitive_type))
      (constvar_param
        name: (identifier)
        coerce_type: (cheat_attr)
        param_type: (primitive_type))
      (constvar_param
        bind_to_register: (register_attr)
        name: (identifier)
        coerce_type: (cheat_attr)
        param_type: (primitive_type))
      (constvar_param
        by_ref: (var_attr)
        bind_to_register: (register_attr)
        name: (identifier)
        coerce_type: (cheat_attr)
        param_type: (primitive_type)))
    end_name: (identifier)))

================================================================================
process declaration - with stack size
================================================================================

process withStack() : 1 end withStack

--------------------------------------------------------------------------------

(source_file
  (process_declaration
    name: (identifier)
    params: (param_spec)
    stack_size: (literal_expression
      (integer_literal))
    end_name: (identifier)))

================================================================================
process declaration - no params
================================================================================

process noParams end noParams

--------------------------------------------------------------------------------

(source_file
  (process_declaration
    name: (identifier)
    end_name: (identifier)))

================================================================================
external declaration - external var
================================================================================

external var externVar

--------------------------------------------------------------------------------

(source_file
  (external_declaration
    name: (identifier)))

================================================================================
external declaration - external var with name spec
================================================================================

external "externVar" var externVar

--------------------------------------------------------------------------------

(source_file
  (external_declaration
    external_spec: (literal_expression
      (string_literal))
    name: (identifier)))

================================================================================
external declaration - external var with type spec
================================================================================

external var externVar : int

--------------------------------------------------------------------------------

(source_file
  (external_declaration
    name: (identifier)
    type_spec: (primitive_type)))

================================================================================
external declaration - external var with initializer
================================================================================

external var externVar := 1

--------------------------------------------------------------------------------

(source_file
  (external_declaration
    name: (identifier)
    initializer: (literal_expression
      (integer_literal))))

================================================================================
external declaration - external var with everything
================================================================================

external "externVar" var externVar : int := 1

--------------------------------------------------------------------------------

(source_file
  (external_declaration
    external_spec: (literal_expression
      (string_literal))
    name: (identifier)
    type_spec: (primitive_type)
    initializer: (literal_expression
      (integer_literal))))

================================================================================
external declaration - external function
================================================================================

external function someFn() : int
external fcn someFn() : int

--------------------------------------------------------------------------------

(source_file
  (external_declaration
    name: (identifier)
    params: (param_spec)
    result_type: (primitive_type))
  (external_declaration
    name: (identifier)
    params: (param_spec)
    result_type: (primitive_type)))

================================================================================
external declaration - external function with name spec
================================================================================

external "someFn" function someFn() : int
external "someFn" fcn someFn() : int

--------------------------------------------------------------------------------

(source_file
  (external_declaration
    external_spec: (literal_expression
      (string_literal))
    name: (identifier)
    params: (param_spec)
    result_type: (primitive_type))
  (external_declaration
    external_spec: (literal_expression
      (string_literal))
    name: (identifier)
    params: (param_spec)
    result_type: (primitive_type)))

================================================================================
external declaration - external procedure
================================================================================

external procedure someProc()
external proc someProc()

--------------------------------------------------------------------------------

(source_file
  (external_declaration
    name: (identifier)
    params: (param_spec))
  (external_declaration
    name: (identifier)
    params: (param_spec)))

================================================================================
external declaration - external procedure with name spec
================================================================================

external "someProc" procedure someProc()
external "someProc" proc someProc()

--------------------------------------------------------------------------------

(source_file
  (external_declaration
    external_spec: (literal_expression
      (string_literal))
    name: (identifier)
    params: (param_spec))
  (external_declaration
    external_spec: (literal_expression
      (string_literal))
    name: (identifier)
    params: (param_spec)))

================================================================================
loop statement - normal
================================================================================
loop end loop

--------------------------------------------------------------------------------

(source_file
  (loop_statement))

================================================================================
loop statement - nesting
================================================================================
loop
  loop
  end loop
end loop

--------------------------------------------------------------------------------

(source_file
  (loop_statement
    (loop_statement)))

================================================================================
loop statement - missing final end loop
================================================================================

loop end
var a := 1

--------------------------------------------------------------------------------

(source_file
  (loop_statement
    (MISSING "loop"))
  (constvar_declaration
    (identifier)
    (literal_expression
      (integer_literal))))

================================================================================
loop statement - with endloop
================================================================================

loop endloop
var a := 1

--------------------------------------------------------------------------------

(source_file
  (ERROR
    (call_statement
      (nameref_expression
        (path_component
          (identifier))))
    (constvar_declaration
      (identifier)
      (literal_expression
        (integer_literal)))))

================================================================================
for statement - increasing
================================================================================

for a : 1 .. 3 end for
for a : 1 .. 3 by 1 end for

--------------------------------------------------------------------------------

(source_file
  (for_statement
    name: (identifier)
    bounds: (range_expression
      start: (literal_expression
        (integer_literal))
      end: (literal_expression
        (integer_literal))))
  (for_statement
    name: (identifier)
    bounds: (range_expression
      start: (literal_expression
        (integer_literal))
      end: (literal_expression
        (integer_literal)))
    step_by: (literal_expression
      (integer_literal))))

================================================================================
for statement - decreasing
================================================================================

for decreasing a : 1 .. 3 end for
for decreasing a : 1 .. 3 by 1 end for

--------------------------------------------------------------------------------

(source_file
  (for_statement
    name: (identifier)
    bounds: (range_expression
      start: (literal_expression
        (integer_literal))
      end: (literal_expression
        (integer_literal))))
  (for_statement
    name: (identifier)
    bounds: (range_expression
      start: (literal_expression
        (integer_literal))
      end: (literal_expression
        (integer_literal)))
    step_by: (literal_expression
      (integer_literal))))

================================================================================
for statement - no counter name
================================================================================

for : 1 .. 3 end for
for decreasing : 1 .. 3 end for

--------------------------------------------------------------------------------

(source_file
  (for_statement
    bounds: (range_expression
      start: (literal_expression
        (integer_literal))
      end: (literal_expression
        (integer_literal))))
  (for_statement
    bounds: (range_expression
      start: (literal_expression
        (integer_literal))
      end: (literal_expression
        (integer_literal)))))

================================================================================
for statement - single bound
================================================================================

for : 1 end for
% technically valid syntax, but not valid sematically
% that's a job for toco
for decreasing : 1 end for

--------------------------------------------------------------------------------

(source_file
  (for_statement
    bounds: (literal_expression
      (integer_literal)))
  (line_comment)
  (line_comment)
  (for_statement
    bounds: (literal_expression
      (integer_literal))))

================================================================================
for statement - missing bounds
================================================================================

for :
end for

--------------------------------------------------------------------------------

(source_file
  (ERROR
    (nameref_expression
      (path_component
        (identifier)))))

================================================================================
for statement - with endfor
================================================================================

for : 1 endfor

--------------------------------------------------------------------------------

(source_file
  (ERROR
    (literal_expression
      (integer_literal))
    (nameref_expression
      (path_component
        (identifier)))))

================================================================================
for statement - missing final for
================================================================================

for : 1 end 
var a := 1

--------------------------------------------------------------------------------

(source_file
  (for_statement
    (literal_expression
      (integer_literal))
    (MISSING "for"))
  (constvar_declaration
    (identifier)
    (literal_expression
      (integer_literal))))

================================================================================
exit statement - plain
================================================================================

exit

--------------------------------------------------------------------------------

(source_file
  (exit_statement))

================================================================================
exit statement - with condition
================================================================================

exit when true

--------------------------------------------------------------------------------

(source_file
  (exit_statement
    condition: (literal_expression
      (boolean_literal))))

================================================================================
exit statement - missing condition
================================================================================

loop
  exit when 
end loop

--------------------------------------------------------------------------------

(source_file
  (ERROR
    (exit_statement
      condition: (nameref_expression
        (path_component
          (identifier))))))

================================================================================
if statement - bare
================================================================================

if true then
  if false then end if
end if

--------------------------------------------------------------------------------

(source_file
  (if_statement
    condition: (literal_expression
      (boolean_literal))
    (if_statement
      condition: (literal_expression
        (boolean_literal)))))

================================================================================
if statement - if else
================================================================================

if true then
  loop end loop
else 
  var a := 1
end if

--------------------------------------------------------------------------------

(source_file
  (if_statement
    condition: (literal_expression
      (boolean_literal))
    (loop_statement)
    (else_clause
      (constvar_declaration
        name: (identifier)
        initializer: (literal_expression
          (integer_literal))))))

================================================================================
if statement - if elsif
================================================================================

if true then
  var a := 1
elsif false then
  loop end loop
elsif false then
  exit
end if

--------------------------------------------------------------------------------

(source_file
  (if_statement
    condition: (literal_expression
      (boolean_literal))
    (constvar_declaration
      name: (identifier)
      initializer: (literal_expression
        (integer_literal)))
    (elsif_clause
      condition: (literal_expression
        (boolean_literal))
      (loop_statement))
    (elsif_clause
      condition: (literal_expression
        (boolean_literal))
      (exit_statement))))

================================================================================
if statement - if elsif else
================================================================================

if true then
  var a := 1
elsif false then
  loop end loop
elsif false then
  exit
else
  exit when true
end if

--------------------------------------------------------------------------------

(source_file
  (if_statement
    condition: (literal_expression
      (boolean_literal))
    (constvar_declaration
      name: (identifier)
      initializer: (literal_expression
        (integer_literal)))
    (elsif_clause
      condition: (literal_expression
        (boolean_literal))
      (loop_statement))
    (elsif_clause
      condition: (literal_expression
        (boolean_literal))
      (exit_statement))
    (else_clause
      (exit_statement
        condition: (literal_expression
          (boolean_literal))))))

================================================================================
if statement - elsif variations
================================================================================

if true then
elseif true then
elif true then
end if

--------------------------------------------------------------------------------

(source_file
  (if_statement
    condition: (literal_expression
      (boolean_literal))
    (call_statement
      left: (nameref_expression
        (path_component
          (identifier))))
    (ERROR
      (literal_expression
        (boolean_literal)))
    (call_statement
      left: (nameref_expression
        (path_component
          (identifier))))
    (ERROR
      (literal_expression
        (boolean_literal)))))

================================================================================
if statement - endif
================================================================================

if true then
elsif true then
else
endif

--------------------------------------------------------------------------------

(source_file
  (ERROR
    (literal_expression
      (boolean_literal))
    (elsif_clause
      condition: (literal_expression
        (boolean_literal)))
    (else_clause
      (call_statement
        left: (nameref_expression
          (path_component
            (identifier)))))))

================================================================================
if statement - missing final if
================================================================================

if true then
  loop end loop
end

--------------------------------------------------------------------------------

(source_file
  (if_statement
    condition: (literal_expression
      (boolean_literal))
    (loop_statement)
    (MISSING "if")))

================================================================================
if statement - bare else
================================================================================

else
  loop end loop
end if

--------------------------------------------------------------------------------

(source_file
  (call_statement
    (nameref_expression
      (path_component
        (identifier))))
  (loop_statement)
  (call_statement
    (nameref_expression
      (path_component
        (identifier))))
  (ERROR))

================================================================================
if statement - bare elsif
================================================================================

elsif true then
  loop end loop
end if

--------------------------------------------------------------------------------

(source_file
  (call_statement
    (nameref_expression
      (path_component
        (identifier))))
  (ERROR
    (literal_expression
      (boolean_literal)))
  (loop_statement)
  (call_statement
    (nameref_expression
      (path_component
        (identifier))))
  (ERROR))

================================================================================
if statement - bare elseif
================================================================================

elseif true then
  loop end loop
end if

--------------------------------------------------------------------------------

(source_file
  (call_statement
    (nameref_expression
      (path_component
        (identifier))))
  (ERROR
    (literal_expression
      (boolean_literal)))
  (loop_statement)
  (call_statement
    (nameref_expression
      (path_component
        (identifier))))
  (ERROR))

================================================================================
if statement - bare elif
================================================================================

elif true then
  loop end loop
end if

--------------------------------------------------------------------------------

(source_file
  (call_statement
    (nameref_expression
      (path_component
        (identifier))))
  (ERROR
    (literal_expression
      (boolean_literal)))
  (loop_statement)
  (call_statement
    (nameref_expression
      (path_component
        (identifier))))
  (ERROR))

================================================================================
if statement - missing condition
================================================================================

if then
  loop end loop
end if

--------------------------------------------------------------------------------

(source_file
  (ERROR
    (nameref_expression
      (path_component
        (identifier)))
    (identifier)))

================================================================================
if statement - missing then
================================================================================

if true
  loop end loop
end if

--------------------------------------------------------------------------------

(source_file
  (ERROR
    (literal_expression
      (boolean_literal))
    (identifier)))

================================================================================
case statement - no arms
================================================================================

case true of
end case

--------------------------------------------------------------------------------

(source_file
  (case_statement
    condition: (literal_expression
      (boolean_literal))))

================================================================================
case statement - empty arm
================================================================================

case true of
label 1:
end case

--------------------------------------------------------------------------------

(source_file
  (case_statement
    condition: (literal_expression
      (boolean_literal))
    (case_arm
      pattern: (literal_expression
        (integer_literal)))))

================================================================================
case statement - empty patterns
================================================================================

case true of
label :
end case

--------------------------------------------------------------------------------

(source_file
  (case_statement
    condition: (literal_expression
      (boolean_literal))
    (case_arm)))

================================================================================
case statement - one arm
================================================================================

case true of
label 1:
  loop end loop
end case

--------------------------------------------------------------------------------

(source_file
  (case_statement
    condition: (literal_expression
      (boolean_literal))
    (case_arm
      pattern: (literal_expression
        (integer_literal))
      (loop_statement))))

================================================================================
case statement - multiple arms
================================================================================

case true of
label 1:
  loop end loop
label :
  loop end loop
label 3:
  loop end loop
end case

--------------------------------------------------------------------------------

(source_file
  (case_statement
    condition: (literal_expression
      (boolean_literal))
    (case_arm
      pattern: (literal_expression
        (integer_literal))
      (loop_statement))
    (case_arm
      (loop_statement))
    (case_arm
      pattern: (literal_expression
        (integer_literal))
      (loop_statement))))

================================================================================
case statement - multiple patterns
================================================================================

case true of
label 1, 2, 3, 4, 5:
  loop end loop
end case

--------------------------------------------------------------------------------

(source_file
  (case_statement
    condition: (literal_expression
      (boolean_literal))
    (case_arm
      pattern: (literal_expression
        (integer_literal))
      pattern: (literal_expression
        (integer_literal))
      pattern: (literal_expression
        (integer_literal))
      pattern: (literal_expression
        (integer_literal))
      pattern: (literal_expression
        (integer_literal))
      (loop_statement))))

================================================================================
case statement - with endcase
================================================================================

case true of endcase

--------------------------------------------------------------------------------

(source_file
  (ERROR
    (literal_expression
      (boolean_literal))
    (identifier)))

================================================================================
case statement - missing final case
================================================================================

case true of end

--------------------------------------------------------------------------------

(source_file
  (case_statement
    condition: (literal_expression
      (boolean_literal))
    (MISSING "case")))

================================================================================
block statement
================================================================================

begin
  begin end
end

--------------------------------------------------------------------------------

(source_file
  (block_statement
    (block_statement)))

================================================================================
assign statement
================================================================================

a := b
1 := 2 % handled by typeck, not the parser

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (assign_statement
    left: (literal_expression
      (integer_literal))
    right: (literal_expression
      (integer_literal)))
  (line_comment))

================================================================================
compound assign statement
================================================================================

a => = b
a or = b
a | = b
a and = b
a & = b
a + = b
a - = b
a xor = b
a * = b
a / = b
a div = b
a mod = b
a rem = b
a shl = b
a shr = b
a ** = b

--------------------------------------------------------------------------------

(source_file
  (compound_assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (compound_assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (compound_assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (compound_assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (compound_assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (compound_assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (compound_assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (compound_assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (compound_assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (compound_assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (compound_assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (compound_assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (compound_assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (compound_assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (compound_assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (compound_assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier)))))

================================================================================
invariant statement
================================================================================

invariant true or true

--------------------------------------------------------------------------------

(source_file
  (invariant_statement
    condition: (binary_expression
      left: (literal_expression
        (boolean_literal))
      right: (literal_expression
        (boolean_literal)))))

================================================================================
assert statement
================================================================================

assert true or true

--------------------------------------------------------------------------------

(source_file
  (assert_statement
    condition: (binary_expression
      left: (literal_expression
        (boolean_literal))
      right: (literal_expression
        (boolean_literal)))))

================================================================================
call statement - bare
================================================================================

aaaa

--------------------------------------------------------------------------------

(source_file
  (call_statement
    left: (nameref_expression
      (path_component
        (identifier)))))

================================================================================
call statement - bare, fields
================================================================================

aaaa.bbb.cc.d

--------------------------------------------------------------------------------

(source_file
  (call_statement
    left: (field_expression
      left: (field_expression
        left: (field_expression
          left: (nameref_expression
            (path_component
              (identifier)))
          field: (path_component
            (identifier)))
        field: (path_component
          (identifier)))
      field: (path_component
        (identifier)))))

================================================================================
call statement - with parens
================================================================================

1()

--------------------------------------------------------------------------------

(source_file
  (call_statement
    (call_expression
      left: (literal_expression
        (integer_literal)))))

================================================================================
return statement
================================================================================

return

--------------------------------------------------------------------------------

(source_file
  (return_statement))

================================================================================
result statement
================================================================================

result 1 + 1

--------------------------------------------------------------------------------

(source_file
  (result_statement
    value: (binary_expression
      left: (literal_expression
        (integer_literal))
      right: (literal_expression
        (integer_literal)))))

================================================================================
result statement - missing value
================================================================================

result

--------------------------------------------------------------------------------

(source_file
  (ERROR))
