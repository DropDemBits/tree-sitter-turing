================================================================================
statements - surrounded by semis
================================================================================

;;;;;;;;;;;;;
const a := 2;
type q : int;
;;;;;;;;;;;;;

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (integer_literal)))
  (type_declaration
    (identifier)
    (primitive_type)))

================================================================================
statements - with semis
================================================================================

const a := 2;
type q : int;

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (integer_literal)))
  (type_declaration
    (identifier)
    (primitive_type)))

================================================================================
constvar declaration - full
================================================================================

const a : boolean := b
var a : boolean := b

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    name: (identifier)
    type_spec: (primitive_type)
    initializer: (identifier))
  (constvar_declaration
    name: (identifier)
    type_spec: (primitive_type)
    initializer: (identifier)))

================================================================================
constvar declaration - type only
================================================================================

const a : boolean
var a : boolean

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (primitive_type))
  (constvar_declaration
    (identifier)
    (primitive_type)))

================================================================================
constvar declaration - init only
================================================================================

const a := b
var a := b

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (identifier))
  (constvar_declaration
    (identifier)
    (identifier)))

================================================================================
constvar declaration - missing both
================================================================================

const a
var a

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier))
  (constvar_declaration
    (identifier)))

================================================================================
constvar declaration - pervasive attr
================================================================================

const pervasive a
var pervasive a

const * a
var * a

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (pervasive_attr)
    (identifier))
  (constvar_declaration
    (pervasive_attr)
    (identifier))
  (constvar_declaration
    (pervasive_attr)
    (identifier))
  (constvar_declaration
    (pervasive_attr)
    (identifier)))

================================================================================
constvar declaration - register attr
================================================================================

const register a
var register a

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (register_attr)
    (identifier))
  (constvar_declaration
    (register_attr)
    (identifier)))

================================================================================
constvar declaration - attr ordering
================================================================================

const pervasive register a
var register pervasive a

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (pervasive_attr)
    (register_attr)
    (identifier))
  (constvar_declaration
    (register_attr)
    (identifier))
  (ERROR
    (identifier)))

================================================================================
constvar declaration - multiple names
================================================================================

const a, b, c, d : int

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    name: (identifier)
    name: (identifier)
    name: (identifier)
    name: (identifier)
    type_spec: (primitive_type)))

================================================================================
constvar declaration - alt eq
================================================================================

const a = 1
var b = 2

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier))
  (ERROR
    (UNEXPECTED '='))
  (constvar_declaration
    (identifier))
  (ERROR
    (UNEXPECTED '=')))

================================================================================
type declaration - full
================================================================================

type a : boolean
type a : forward

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    name: (identifier)
    type_spec: (primitive_type))
  (type_declaration
    name: (identifier)
    type_spec: (forward_type)))

================================================================================
type declaration - pervasive
================================================================================

type pervasive a : boolean
type * a : boolean

--------------------------------------------------------------------------------

(source_file
  (type_declaration
    (pervasive_attr)
    (identifier)
    (primitive_type))
  (type_declaration
    (pervasive_attr)
    (identifier)
    (primitive_type)))

================================================================================
type declaration - missing colon
================================================================================

type a boolean

--------------------------------------------------------------------------------

(source_file
  (ERROR
    (identifier)
    (identifier)))

================================================================================
bind declaration - single
================================================================================

bind a to 1

--------------------------------------------------------------------------------

(source_file
  (bind_declaration
    (bind_item
      (identifier)
      (literal_expression
        (integer_literal)))))

================================================================================
bind declaration - many items
================================================================================

bind a to 1, b to 2, c to 3

--------------------------------------------------------------------------------

(source_file
  (bind_declaration
    (bind_item
      (identifier)
      (literal_expression
        (integer_literal)))
    (bind_item
      (identifier)
      (literal_expression
        (integer_literal)))
    (bind_item
      (identifier)
      (literal_expression
        (integer_literal)))))

================================================================================
bind declaration - trailing comma
================================================================================

bind a to 1,
bind a to 1, b to 2, c to 3,

--------------------------------------------------------------------------------

(source_file
  (bind_declaration
    (bind_item
      (identifier)
      (literal_expression
        (integer_literal)))
    (bind_item
      (identifier)
      (ERROR
        (identifier))
      (literal_expression
        (integer_literal)))
    (bind_item
      (identifier)
      (literal_expression
        (integer_literal)))
    (bind_item
      (identifier)
      (literal_expression
        (integer_literal))))
  (ERROR))

================================================================================
bind declaration - with attrs
================================================================================

bind
  var a to 1,
  register b to 2,
  var register c to 3

--------------------------------------------------------------------------------

(source_file
  (bind_declaration
    (bind_item
      (var_attr)
      (identifier)
      (literal_expression
        (integer_literal)))
    (bind_item
      (register_attr)
      (identifier)
      (literal_expression
        (integer_literal)))
    (bind_item
      (var_attr)
      (register_attr)
      (identifier)
      (literal_expression
        (integer_literal)))))

================================================================================
bind declaration - backwards attrs
================================================================================

bind register var c to 3

--------------------------------------------------------------------------------

(source_file
  (bind_declaration
    (bind_item
      (register_attr)
      name: (identifier)
      (ERROR
        (identifier))
      (literal_expression
        (integer_literal)))))

================================================================================
bind declaration - followed by constvar
================================================================================

bind a to b
var wa : int

--------------------------------------------------------------------------------

(source_file
  (bind_declaration
    (bind_item
      (identifier)
      (identifier)))
  (constvar_declaration
    (identifier)
    (primitive_type)))

================================================================================
bind declaration - error recovery, followed by constvar
================================================================================

bind a to b,
var wa : int

var wow : int % resync

--------------------------------------------------------------------------------

(source_file
  (bind_declaration
    (bind_item
      (identifier)
      (identifier)))
  (ERROR
    (ERROR
      (var_attr)
      (identifier))
    (var_attr)
    (identifier))
  (line_comment))

================================================================================
loop statement - normal
================================================================================
loop end loop

--------------------------------------------------------------------------------

(source_file
  (loop_statement))

================================================================================
loop statement - nesting
================================================================================
loop
  loop
  end loop
end loop

--------------------------------------------------------------------------------

(source_file
  (loop_statement
    (loop_statement)))

================================================================================
loop statement - missing final end loop
================================================================================

loop end
var a := 1

--------------------------------------------------------------------------------

(source_file
  (ERROR
    (identifier)
    (identifier)))

================================================================================
loop statement - with endloop
================================================================================

loop endloop
var a := 1

--------------------------------------------------------------------------------

(source_file
  (loop_statement)
  (constvar_declaration
    (identifier)
    (literal_expression
      (integer_literal))))

================================================================================
for statement - increasing
================================================================================

for a : 1 .. 3 end for
for a : 1 .. 3 by 1 end for

--------------------------------------------------------------------------------

(source_file
  (for_statement
    name: (identifier)
    start: (literal_expression
      (integer_literal))
    end: (literal_expression
      (integer_literal)))
  (for_statement
    name: (identifier)
    start: (literal_expression
      (integer_literal))
    end: (literal_expression
      (integer_literal))
    step_by: (literal_expression
      (integer_literal))))

================================================================================
for statement - decreasing
================================================================================

for decreasing a : 1 .. 3 end for
for decreasing a : 1 .. 3 by 1 end for

--------------------------------------------------------------------------------

(source_file
  (for_statement
    name: (identifier)
    start: (literal_expression
      (integer_literal))
    end: (literal_expression
      (integer_literal)))
  (for_statement
    name: (identifier)
    start: (literal_expression
      (integer_literal))
    end: (literal_expression
      (integer_literal))
    step_by: (literal_expression
      (integer_literal))))

================================================================================
for statement - no counter name
================================================================================

for : 1 .. 3 end for
for decreasing : 1 .. 3 end for

--------------------------------------------------------------------------------

(source_file
  (for_statement
    start: (literal_expression
      (integer_literal))
    end: (literal_expression
      (integer_literal)))
  (for_statement
    start: (literal_expression
      (integer_literal))
    end: (literal_expression
      (integer_literal))))

================================================================================
for statement - single bound
================================================================================

for : 1 end for
% technically valid syntax, but not valid sematically
% that's a job for toco
for decreasing : 1 end for

--------------------------------------------------------------------------------

(source_file
  (for_statement
    bounds: (literal_expression
      (integer_literal)))
  (line_comment)
  (line_comment)
  (for_statement
    bounds: (literal_expression
      (integer_literal))))

================================================================================
for statement - missing bounds
================================================================================

for :
end for

--------------------------------------------------------------------------------

(source_file
  (ERROR
    (identifier)))

================================================================================
for statement - with endfor
================================================================================

for : 1 endfor

--------------------------------------------------------------------------------

(source_file
  (for_statement
    bounds: (literal_expression
      (integer_literal))))

================================================================================
for statement - missing final for
================================================================================

for : 1 end 
var a := 1

--------------------------------------------------------------------------------

(source_file
  (ERROR
    (literal_expression
      (integer_literal))
    (identifier)
    (identifier)))

================================================================================
exit statement - plain
================================================================================

exit

--------------------------------------------------------------------------------

(source_file
  (exit_statement))

================================================================================
exit statement - with condition
================================================================================

exit when true

--------------------------------------------------------------------------------

(source_file
  (exit_statement
    condition: (literal_expression
      (boolean_literal))))

================================================================================
exit statement - missing condition
================================================================================

loop
  exit when 
end loop

--------------------------------------------------------------------------------

(ERROR
  (exit_statement
    condition: (identifier)))
