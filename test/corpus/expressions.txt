================================================================================
string literal - simple
================================================================================

const a := "abcdðŸ’–"

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal))))

================================================================================
string literal - with backslash escapes
================================================================================

const a := "\\\"\'\^"
const a := "\b\d\e\f\r\n\t\B\D\E\F\R\N\T"
const a := "\07"
const a := "\xaA"
const a := "\u0aA"
const a := "  \t  "

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence))))
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence)
        (escape_sequence))))
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal
        (escape_sequence))))
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal
        (escape_sequence))))
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal
        (escape_sequence))))
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal
        (escape_sequence)))))

================================================================================
string literal - with caret escapes
================================================================================

const a := "^a"
const a := "^@"
const a := "^\"
const a := "^[^]"
const a := "^_"
const a := "^?"

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal
        (escape_sequence))))
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal
        (escape_sequence))))
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal
        (escape_sequence))))
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal
        (escape_sequence)
        (escape_sequence))))
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal
        (escape_sequence))))
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal
        (escape_sequence)))))

================================================================================
string literal - not an escaped terminator
================================================================================

const a := "abcd\\\k"
const a := "abcd^^^""
const a := "abcd^""
const a := "abcd^="

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal
        (escape_sequence)
        (ERROR
          (identifier)))))
  (constvar_declaration
    (identifier)
    (ERROR
      (escape_sequence))
    (deref_expression
      (literal_expression
        (string_literal))))
  (constvar_declaration
    (identifier)
    (ERROR)
    (deref_expression
      (literal_expression
        (string_literal))))
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal
        (ERROR)))))

================================================================================
string literal - invalid, ends at the end of the line
================================================================================

const a := "abcd
const a := b

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (ERROR)
    (nameref_expression
      (path_component
        (identifier))))
  (assign_statement
    (nameref_expression
      (path_component
        (identifier)))
    (nameref_expression
      (path_component
        (identifier)))))

================================================================================
string literal - invalid, ends at the end of the file
================================================================================

const a := "abcd
--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (ERROR)
    (nameref_expression
      (path_component
        (identifier)))))

================================================================================
string literal - invalid, escaped
================================================================================

const a := "abcd\"
const a := "abcd^"

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal
        (escape_sequence)
        (MISSING """))))
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal
        (ERROR)))))

================================================================================
string literal - invalid, empty
================================================================================

const a := "

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (string_literal
        (MISSING """)))))

================================================================================
char literal - simple
================================================================================

const a := 'abcdðŸ’–'

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (char_literal))))

================================================================================
char literal - not an escaped terminator
================================================================================

const a := 'abcd\\'

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (char_literal
        (escape_sequence)))))

================================================================================
char literal - invalid, ends at the end of the line
================================================================================

const a := 'abcd
const a := wah

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (ERROR)
    (nameref_expression
      (path_component
        (identifier))))
  (assign_statement
    (nameref_expression
      (path_component
        (identifier)))
    (nameref_expression
      (path_component
        (identifier)))))

================================================================================
char literal - invalid, ends at the end of the file
================================================================================

const a := 'abcd
--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (ERROR)
    (nameref_expression
      (path_component
        (identifier)))))

================================================================================
char literal - invalid, escaped terminator
================================================================================

const a := 'abcd\'
const a := 'abcd^'

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (char_literal
        (escape_sequence)
        (MISSING "'"))))
  (constvar_declaration
    (identifier)
    (literal_expression
      (char_literal
        (ERROR)))))

================================================================================
char literal - invalid, mismatched delimiter
================================================================================

const a := 'abcd"

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (char_literal
        (MISSING "'")))))

================================================================================
char literal - invalid, empty
================================================================================

const a := '

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (char_literal
        (MISSING "'")))))

================================================================================
boolean literal - simple
================================================================================

const a := true
const a := false

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (boolean_literal)))
  (constvar_declaration
    (identifier)
    (literal_expression
      (boolean_literal))))

================================================================================
int literal - simple
================================================================================

const a := 01234560
const a := 99999999999999999999

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (integer_literal)))
  (constvar_declaration
    (identifier)
    (literal_expression
      (integer_literal))))

================================================================================
int literal - digit cutoff
================================================================================

const a := 999a999

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (integer_literal)))
  (call_statement
    (nameref_expression
      (path_component
        (identifier)))))

================================================================================
int literal - radix
================================================================================

const a := 10#99999999999999999999

% not handling out of range stuff here
const a := 37#asda
const a := 0#0000
const a := 1#0000
const a := 18446744073709551616#0000
const a := 10#999a9a9

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (integer_literal)))
  (line_comment)
  (constvar_declaration
    (identifier)
    (literal_expression
      (integer_literal)))
  (constvar_declaration
    (identifier)
    (literal_expression
      (integer_literal)))
  (constvar_declaration
    (identifier)
    (literal_expression
      (integer_literal)))
  (constvar_declaration
    (identifier)
    (literal_expression
      (integer_literal)))
  (constvar_declaration
    (identifier)
    (literal_expression
      (integer_literal))))

================================================================================
int literal - radix, no digits
================================================================================

const a := 30#

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (integer_literal)))
  (ERROR))

================================================================================
real literal - simple
================================================================================

const a := 1.
const a := 100.00
const a := 100.00e10
const a := 100.00e100

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (field_expression
      (literal_expression
        (integer_literal))
      (path_component
        (identifier))))
  (assign_statement
    (nameref_expression
      (path_component
        (identifier)))
    (literal_expression
      (real_literal)))
  (constvar_declaration
    (identifier)
    (literal_expression
      (real_literal)))
  (constvar_declaration
    (identifier)
    (literal_expression
      (real_literal))))

================================================================================
real literal - leading dot
================================================================================

const a := .12345
const a := .12345.6789

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (real_literal)))
  (constvar_declaration
    (identifier)
    (literal_expression
      (real_literal)))
  (ERROR
    (literal_expression
      (real_literal))))

================================================================================
real literal - out of range but still accept
================================================================================

const a := 1e600
const a := 1.0e600
const a := 1e-999999999
const a := 1.0e-999999999

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (real_literal)))
  (constvar_declaration
    (identifier)
    (literal_expression
      (real_literal)))
  (constvar_declaration
    (identifier)
    (literal_expression
      (real_literal)))
  (constvar_declaration
    (identifier)
    (literal_expression
      (real_literal))))

================================================================================
real literal - negative & positive exponents
================================================================================

const a := 100.00e-100
const a := 100.00e+100
const a := 1e100

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (real_literal)))
  (constvar_declaration
    (identifier)
    (literal_expression
      (real_literal)))
  (constvar_declaration
    (identifier)
    (literal_expression
      (real_literal))))

================================================================================
real literal - invalid format
================================================================================

const a := 1e+
const a := 1e-
const a := 1e
const a := 1eggy
const a := 1.0e

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (literal_expression
      (real_literal)))
  (assign_statement
    (binary_expression
      (nameref_expression
        (path_component
          (identifier)))
      (nameref_expression
        (path_component
          (identifier))))
    (ERROR
      (identifier))
    (literal_expression
      (real_literal)))
  (assign_statement
    (binary_expression
      (nameref_expression
        (path_component
          (identifier)))
      (nameref_expression
        (path_component
          (identifier))))
    (ERROR
      (identifier))
    (literal_expression
      (real_literal)))
  (call_statement
    (nameref_expression
      (path_component
        (identifier))))
  (constvar_declaration
    (identifier)
    (literal_expression
      (real_literal)))
  (call_statement
    (nameref_expression
      (path_component
        (identifier))))
  (constvar_declaration
    (identifier)
    (literal_expression
      (real_literal)))
  (call_statement
    (nameref_expression
      (path_component
        (identifier)))))

================================================================================
real literal - trailing +/-
================================================================================
const a := 1.0+
const a := 1.0-
const a := 1.0-1000

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (binary_expression
      (literal_expression
        (real_literal))
      (nameref_expression
        (path_component
          (identifier)))))
  (assign_statement
    (nameref_expression
      (path_component
        (identifier)))
    (binary_expression
      (literal_expression
        (real_literal))
      (nameref_expression
        (path_component
          (identifier)))))
  (assign_statement
    (nameref_expression
      (path_component
        (identifier)))
    (binary_expression
      (literal_expression
        (real_literal))
      (literal_expression
        (integer_literal)))))

================================================================================
objclass expression
================================================================================

const a := objectclass(wow)

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (objclass_expression
      (nameref_expression
        (path_component
          (identifier))))))

================================================================================
objclass expression - missing expr
================================================================================

const a := objectclass()

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (objclass_expression
      (nameref_expression
        (path_component
          (MISSING identifier))))))

================================================================================
init expression - no items
================================================================================

const a := init()

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (init_expression)))

================================================================================
init expression - no items, with comma
================================================================================

const a := init(,)

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (init_expression)))

================================================================================
init expression - one item
================================================================================

const a := init(1)

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (init_expression
      (literal_expression
        (integer_literal)))))

================================================================================
init expression - many items
================================================================================

const a := init(1, 2, 3, 4)

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (init_expression
      (literal_expression
        (integer_literal))
      (literal_expression
        (integer_literal))
      (literal_expression
        (integer_literal))
      (literal_expression
        (integer_literal)))))

================================================================================
init expression - many items, trailing comma
================================================================================

const a := init(1, 2, 3, 4, )

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (init_expression
      (literal_expression
        (integer_literal))
      (literal_expression
        (integer_literal))
      (literal_expression
        (integer_literal))
      (literal_expression
        (integer_literal)))))

================================================================================
nil expression - standalone
================================================================================

const a := nil

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (nil_expression)))

================================================================================
nil expression - specific type
================================================================================

const a := nil(owo)
const a := nil(int)

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (nil_expression
      (item_path
        (path_component
          (identifier)))))
  (constvar_declaration
    (identifier)
    (nil_expression
      (primitive_type))))

================================================================================
nil expression - only parens
================================================================================

const a := nil()

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (nil_expression)))

================================================================================
nil expression - bare
================================================================================

const a := nil

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (nil_expression)))

================================================================================
self expression
================================================================================

const a := self

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (self_expression)))

================================================================================
sizeof
================================================================================

const a := sizeof(1)
const a := sizeof(int)

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    (identifier)
    (sizeof_expression
      (literal_expression
        (integer_literal))))
  (constvar_declaration
    (identifier)
    (sizeof_expression
      (primitive_type))))

================================================================================
sizeof expression - accept size specs
================================================================================

% size specs aren't planned to be supported in sema, but we still should
% parse them
const a := sizeof(uwu : 3)

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (line_comment)
  (constvar_declaration
    (identifier)
    (sizeof_expression
      (nameref_expression
        (path_component
          (identifier)))
      (literal_expression
        (integer_literal)))))

================================================================================
binary expression - left associative
================================================================================

var a := 1 + 1 + 1 + 1

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    name: (identifier)
    initializer: (binary_expression
      left: (binary_expression
        left: (binary_expression
          left: (literal_expression
            (integer_literal))
          right: (literal_expression
            (integer_literal)))
        right: (literal_expression
          (integer_literal)))
      right: (literal_expression
        (integer_literal)))))

================================================================================
binary expression - right associative
================================================================================

var a := 2 ** 3 ** 3 ** 3

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    name: (identifier)
    initializer: (binary_expression
      left: (literal_expression
        (integer_literal))
      right: (binary_expression
        left: (literal_expression
          (integer_literal))
        right: (binary_expression
          left: (literal_expression
            (integer_literal))
          right: (literal_expression
            (integer_literal)))))))

================================================================================
binary expression - precedence
================================================================================

var a := false or true and 1 < 1 + 1 * 2 * 2 + 1 or false => true

--------------------------------------------------------------------------------

(source_file
  (constvar_declaration
    name: (identifier)
    initializer: (binary_expression
      left: (binary_expression
        left: (binary_expression
          left: (literal_expression
            (boolean_literal))
          right: (binary_expression
            left: (literal_expression
              (boolean_literal))
            right: (binary_expression
              left: (literal_expression
                (integer_literal))
              right: (binary_expression
                left: (binary_expression
                  left: (literal_expression
                    (integer_literal))
                  right: (binary_expression
                    left: (binary_expression
                      left: (literal_expression
                        (integer_literal))
                      right: (literal_expression
                        (integer_literal)))
                    right: (literal_expression
                      (integer_literal))))
                right: (literal_expression
                  (integer_literal))))))
        right: (literal_expression
          (boolean_literal)))
      right: (literal_expression
        (boolean_literal)))))

================================================================================
unary expression - not
================================================================================

a := ~not b
a := ~b

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (unary_expression
      right: (unary_expression
        right: (nameref_expression
          (path_component
            (identifier))))))
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (unary_expression
      right: (nameref_expression
        (path_component
          (identifier))))))

================================================================================
unary expression - not as infix
================================================================================

a := b not b
a := b ~ b

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (ERROR)
  (call_statement
    left: (nameref_expression
      (path_component
        (identifier))))
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (nameref_expression
      (path_component
        (identifier))))
  (ERROR)
  (call_statement
    left: (nameref_expression
      (path_component
        (identifier)))))

================================================================================
unary expression - negation
================================================================================

a := -b

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    (nameref_expression
      (path_component
        (identifier)))
    (unary_expression
      (nameref_expression
        (path_component
          (identifier))))))

================================================================================
binary expression - negation and subtraction
================================================================================

a := b--b

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    (nameref_expression
      (path_component
        (identifier)))
    (binary_expression
      (nameref_expression
        (path_component
          (identifier)))
      (unary_expression
        (nameref_expression
          (path_component
            (identifier)))))))

================================================================================
unary expression - identity
================================================================================

a := +a

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (unary_expression
      right: (nameref_expression
        (path_component
          (identifier))))))

================================================================================
unary expression - identity and addition
================================================================================

a := a++a

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (binary_expression
      left: (nameref_expression
        (path_component
          (identifier)))
      right: (unary_expression
        right: (nameref_expression
          (path_component
            (identifier)))))))

================================================================================
paren expression
================================================================================

a := (b)

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    (nameref_expression
      (path_component
        (identifier)))
    (paren_expression
      (nameref_expression
        (path_component
          (identifier))))))

================================================================================
paren expression - empty
================================================================================

a := ()

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    (nameref_expression
      (path_component
        (identifier)))
    (paren_expression
      (nameref_expression
        (path_component
          (MISSING identifier))))))

================================================================================
paren expression - reset precedence
================================================================================

a := 1 * (2 + 3)

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    (nameref_expression
      (path_component
        (identifier)))
    (binary_expression
      (literal_expression
        (integer_literal))
      (paren_expression
        (binary_expression
          (literal_expression
            (integer_literal))
          (literal_expression
            (integer_literal)))))))

================================================================================
field expression
================================================================================

a.b.c.d.e := a.b.c.d.e

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (field_expression
      left: (field_expression
        left: (field_expression
          left: (field_expression
            left: (nameref_expression
              (path_component
                (identifier)))
            field: (path_component
              (identifier)))
          field: (path_component
            (identifier)))
        field: (path_component
          (identifier)))
      field: (path_component
        (identifier)))
    right: (field_expression
      left: (field_expression
        left: (field_expression
          left: (field_expression
            left: (nameref_expression
              (path_component
                (identifier)))
            field: (path_component
              (identifier)))
          field: (path_component
            (identifier)))
        field: (path_component
          (identifier)))
      field: (path_component
        (identifier)))))

================================================================================
deref expression
================================================================================

^a.b := 1

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (field_expression
      left: (deref_expression
        right: (nameref_expression
          (path_component
            (identifier))))
      field: (path_component
        (identifier)))
    right: (literal_expression
      (integer_literal))))

================================================================================
nat cheat expression
================================================================================

#a.b := 1

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (field_expression
      left: (nat_cheat_expression
        right: (nameref_expression
          (path_component
            (identifier))))
      field: (path_component
        (identifier)))
    right: (literal_expression
      (integer_literal))))

================================================================================
arrow expression
================================================================================

a->b := 1

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (arrow_expression
      left: (nameref_expression
        (path_component
          (identifier)))
      field: (identifier))
    right: (literal_expression
      (integer_literal))))

================================================================================
cheat expression
================================================================================

a := cheat(1 .. 2, 3)

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (cheat_expression
      to_type: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal)))
      operand: (literal_expression
        (integer_literal)))))

================================================================================
cheat expression - accept size specs
================================================================================

a := cheat(1 .. 2, 3 : 4)

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (cheat_expression
      to_type: (range_type
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal)))
      operand: (literal_expression
        (integer_literal))
      size_spec: (literal_expression
        (integer_literal)))))

================================================================================
cheat expression - as lhs
================================================================================

cheat(real, some_place) := 6.9

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (cheat_expression
      to_type: (primitive_type)
      operand: (nameref_expression
        (path_component
          (identifier))))
    right: (literal_expression
      (real_literal))))

================================================================================
indirect expression - primitive
================================================================================

boolean @ (true) := 1
char(char(1) @ (2)) @ (3) := 1

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (indirect_expression
      type_spec: (primitive_type)
      (literal_expression
        (boolean_literal)))
    right: (literal_expression
      (integer_literal)))
  (assign_statement
    left: (indirect_expression
      type_spec: (primitive_type
        (charseq_size
          (indirect_expression
            type_spec: (primitive_type
              (charseq_size
                (literal_expression
                  (integer_literal))))
            (literal_expression
              (integer_literal)))))
      (literal_expression
        (integer_literal)))
    right: (literal_expression
      (integer_literal))))

================================================================================
indirect expression - item path
================================================================================

a.b.c @ (1 + 1) := 1

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (indirect_expression
      type_spec: (field_expression
        left: (field_expression
          left: (nameref_expression
            (path_component
              (identifier)))
          field: (path_component
            (identifier)))
        field: (path_component
          (identifier)))
      (binary_expression
        left: (literal_expression
          (integer_literal))
        right: (literal_expression
          (integer_literal))))
    right: (literal_expression
      (integer_literal))))

================================================================================
bits expression - bit span
================================================================================

bits(aaaa, 1 .. 3) := 3

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (bits_expression
      (nameref_expression
        (path_component
          (identifier)))
      (range_expression
        start: (literal_expression
          (integer_literal))
        end: (literal_expression
          (integer_literal))))
    right: (literal_expression
      (integer_literal))))

================================================================================
bits expression - bit place
================================================================================

bits(aaaa, 5) := 1

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (bits_expression
      (nameref_expression
        (path_component
          (identifier)))
      start: (literal_expression
        (integer_literal)))
    right: (literal_expression
      (integer_literal))))

================================================================================
bits expression - optional tail comma
================================================================================

bits(aaa, 5,) := 1

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (bits_expression
      (nameref_expression
        (path_component
          (identifier)))
      start: (literal_expression
        (integer_literal)))
    right: (literal_expression
      (integer_literal))))

================================================================================
no paren call as place
================================================================================

% need type inference to really tell
a := aaaaa + 1

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (binary_expression
      left: (nameref_expression
        (path_component
          (identifier)))
      right: (literal_expression
        (integer_literal)))))

================================================================================
call expression - no args
================================================================================

a := aaaa()

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (call_expression
      left: (nameref_expression
        (path_component
          (identifier))))))

================================================================================
call expression - 1 arg
================================================================================

a := aaaa(1)

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (call_expression
      left: (nameref_expression
        (path_component
          (identifier)))
      (literal_expression
        (integer_literal)))))

================================================================================
call expression - 1 arg, trailing comma
================================================================================

a := aaaa(1,)

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (call_expression
      left: (nameref_expression
        (path_component
          (identifier)))
      (literal_expression
        (integer_literal)))))

================================================================================
call expression - multiple args
================================================================================

a := aaaa(1, 2, 3)

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (call_expression
      left: (nameref_expression
        (path_component
          (identifier)))
      (literal_expression
        (integer_literal))
      (literal_expression
        (integer_literal))
      (literal_expression
        (integer_literal)))))

================================================================================
call expression - 'all' arg
================================================================================

a := aaaa(all, all, all)

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (call_expression
      left: (nameref_expression
        (path_component
          (identifier)))
      (all_expression)
      (all_expression)
      (all_expression))))

================================================================================
call expression - at end bound
================================================================================

a := aaaa(*)

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (call_expression
      left: (nameref_expression
        (path_component
          (identifier)))
      (slice_expression
        start: (slice_from_end_bound)))))

================================================================================
call expression - from end bound
================================================================================

a := aaaa(* - 2)

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (call_expression
      left: (nameref_expression
        (path_component
          (identifier)))
      (slice_expression
        start: (slice_from_end_bound
          from_end: (literal_expression
            (integer_literal)))))))

================================================================================
call expression - slice range, from (start, start)
================================================================================

a := aaaa(1 .. 1)

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    (nameref_expression
      (path_component
        (identifier)))
    (call_expression
      (nameref_expression
        (path_component
          (identifier)))
      (slice_expression
        (literal_expression
          (integer_literal))
        (literal_expression
          (integer_literal))))))

================================================================================
call expression - slice range, from (start, end)
================================================================================

a := aaaa(1 .. * - 2)

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (call_expression
      left: (nameref_expression
        (path_component
          (identifier)))
      (slice_expression
        start: (literal_expression
          (integer_literal))
        end: (slice_from_end_bound
          from_end: (literal_expression
            (integer_literal)))))))

================================================================================
call expression - slice range, from (end, start)
================================================================================

a := aaaa(* - 2 .. 8)

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (call_expression
      left: (nameref_expression
        (path_component
          (identifier)))
      (slice_expression
        start: (slice_from_end_bound
          from_end: (literal_expression
            (integer_literal)))
        end: (literal_expression
          (integer_literal))))))

================================================================================
call expression - slice range, from (end, end)
================================================================================

a := aaaa(* - 8 .. * - 2)

--------------------------------------------------------------------------------

(source_file
  (assign_statement
    left: (nameref_expression
      (path_component
        (identifier)))
    right: (call_expression
      left: (nameref_expression
        (path_component
          (identifier)))
      (slice_expression
        start: (slice_from_end_bound
          from_end: (literal_expression
            (integer_literal)))
        end: (slice_from_end_bound
          from_end: (literal_expression
            (integer_literal)))))))
